/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Uniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Uniswap__factory>;
    getContractFactory(
      name: "IOracleSwapCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSwapCallee__factory>;
    getContractFactory(
      name: "IOracleSwapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSwapERC20__factory>;
    getContractFactory(
      name: "IOracleSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSwapFactory__factory>;
    getContractFactory(
      name: "IOracleSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSwapPair__factory>;
    getContractFactory(
      name: "IOracleSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSwapRouter__factory>;
    getContractFactory(
      name: "IOracleSwapRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSwapRouter01__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "OracleSwapERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleSwapERC20__factory>;
    getContractFactory(
      name: "OracleSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleSwapFactory__factory>;
    getContractFactory(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: "OracleSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleSwapPair__factory>;
    getContractFactory(
      name: "OracleSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleSwapRouter__factory>;
    getContractFactory(
      name: "GovernedBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernedBaseV2__factory>;
    getContractFactory(
      name: "GovernedV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernedV2__factory>;
    getContractFactory(
      name: "IGovernanceSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernanceSettings__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "IMiniChefV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMiniChefV2__factory>;
    getContractFactory(
      name: "IOracleSwapRewardsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleSwapRewardsManager__factory>;
    getContractFactory(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewarder__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "IProphet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProphet__factory>;
    getContractFactory(
      name: "MasterProphet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterProphet__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "OracleBar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleBar__factory>;
    getContractFactory(
      name: "OracleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleDistributor__factory>;
    getContractFactory(
      name: "OracleMaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleMaker__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "OracleSwapRewardsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleSwapRewardsManager__factory>;
    getContractFactory(
      name: "OracleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleToken__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "OwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableData__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ProphetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProphetToken__factory>;
    getContractFactory(
      name: "ProphetSacrifice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProphetSacrifice__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Uniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Uniswap>;
    getContractAt(
      name: "IOracleSwapCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSwapCallee>;
    getContractAt(
      name: "IOracleSwapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSwapERC20>;
    getContractAt(
      name: "IOracleSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSwapFactory>;
    getContractAt(
      name: "IOracleSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSwapPair>;
    getContractAt(
      name: "IOracleSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSwapRouter>;
    getContractAt(
      name: "IOracleSwapRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSwapRouter01>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "OracleSwapERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleSwapERC20>;
    getContractAt(
      name: "OracleSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleSwapFactory>;
    getContractAt(
      name: "IMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: "OracleSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleSwapPair>;
    getContractAt(
      name: "OracleSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleSwapRouter>;
    getContractAt(
      name: "GovernedBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernedBaseV2>;
    getContractAt(
      name: "GovernedV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernedV2>;
    getContractAt(
      name: "IGovernanceSettings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernanceSettings>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "IMiniChefV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMiniChefV2>;
    getContractAt(
      name: "IOracleSwapRewardsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleSwapRewardsManager>;
    getContractAt(
      name: "IRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewarder>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "IMigratorChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "IProphet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProphet>;
    getContractAt(
      name: "MasterProphet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterProphet>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Multicall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "OracleBar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleBar>;
    getContractAt(
      name: "OracleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleDistributor>;
    getContractAt(
      name: "OracleMaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleMaker>;
    getContractAt(
      name: "IMigratorChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "OracleSwapRewardsManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleSwapRewardsManager>;
    getContractAt(
      name: "OracleToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleToken>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "OwnableData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableData>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ProphetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProphetToken>;
    getContractAt(
      name: "ProphetSacrifice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProphetSacrifice>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
