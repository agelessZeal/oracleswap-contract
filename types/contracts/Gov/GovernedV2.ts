/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface GovernedV2Interface extends utils.Interface {
  functions: {
    "cancelGovernanceCall(bytes4)": FunctionFragment;
    "executeGovernanceCall(bytes4)": FunctionFragment;
    "governance()": FunctionFragment;
    "governanceSettings()": FunctionFragment;
    "initialise(address)": FunctionFragment;
    "productionMode()": FunctionFragment;
    "switchToProductionMode()": FunctionFragment;
    "timelockedCalls(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelGovernanceCall"
      | "executeGovernanceCall"
      | "governance"
      | "governanceSettings"
      | "initialise"
      | "productionMode"
      | "switchToProductionMode"
      | "timelockedCalls"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGovernanceCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceSettings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialise", values: [string]): string;
  encodeFunctionData(
    functionFragment: "productionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchToProductionMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedCalls",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGovernanceCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchToProductionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedCalls",
    data: BytesLike
  ): Result;

  events: {
    "GovernanceCallTimelocked(bytes4,uint256,bytes)": EventFragment;
    "GovernanceInitialised(address)": EventFragment;
    "GovernedProductionModeEntered(address)": EventFragment;
    "TimelockedGovernanceCallCanceled(bytes4,uint256)": EventFragment;
    "TimelockedGovernanceCallExecuted(bytes4,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceCallTimelocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceInitialised"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GovernedProductionModeEntered"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TimelockedGovernanceCallCanceled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TimelockedGovernanceCallExecuted"
  ): EventFragment;
}

export interface GovernanceCallTimelockedEventObject {
  selector: string;
  allowedAfterTimestamp: BigNumber;
  encodedCall: string;
}
export type GovernanceCallTimelockedEvent = TypedEvent<
  [string, BigNumber, string],
  GovernanceCallTimelockedEventObject
>;

export type GovernanceCallTimelockedEventFilter =
  TypedEventFilter<GovernanceCallTimelockedEvent>;

export interface GovernanceInitialisedEventObject {
  initialGovernance: string;
}
export type GovernanceInitialisedEvent = TypedEvent<
  [string],
  GovernanceInitialisedEventObject
>;

export type GovernanceInitialisedEventFilter =
  TypedEventFilter<GovernanceInitialisedEvent>;

export interface GovernedProductionModeEnteredEventObject {
  governanceSettings: string;
}
export type GovernedProductionModeEnteredEvent = TypedEvent<
  [string],
  GovernedProductionModeEnteredEventObject
>;

export type GovernedProductionModeEnteredEventFilter =
  TypedEventFilter<GovernedProductionModeEnteredEvent>;

export interface TimelockedGovernanceCallCanceledEventObject {
  selector: string;
  timestamp: BigNumber;
}
export type TimelockedGovernanceCallCanceledEvent = TypedEvent<
  [string, BigNumber],
  TimelockedGovernanceCallCanceledEventObject
>;

export type TimelockedGovernanceCallCanceledEventFilter =
  TypedEventFilter<TimelockedGovernanceCallCanceledEvent>;

export interface TimelockedGovernanceCallExecutedEventObject {
  selector: string;
  timestamp: BigNumber;
}
export type TimelockedGovernanceCallExecutedEvent = TypedEvent<
  [string, BigNumber],
  TimelockedGovernanceCallExecutedEventObject
>;

export type TimelockedGovernanceCallExecutedEventFilter =
  TypedEventFilter<TimelockedGovernanceCallExecutedEvent>;

export interface GovernedV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernedV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelGovernanceCall(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeGovernanceCall(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    governanceSettings(overrides?: CallOverrides): Promise<[string]>;

    initialise(
      _initialGovernance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    productionMode(overrides?: CallOverrides): Promise<[boolean]>;

    switchToProductionMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    timelockedCalls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & {
        allowedAfterTimestamp: BigNumber;
        encodedCall: string;
      }
    >;
  };

  cancelGovernanceCall(
    _selector: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeGovernanceCall(
    _selector: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  governance(overrides?: CallOverrides): Promise<string>;

  governanceSettings(overrides?: CallOverrides): Promise<string>;

  initialise(
    _initialGovernance: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  productionMode(overrides?: CallOverrides): Promise<boolean>;

  switchToProductionMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  timelockedCalls(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & {
      allowedAfterTimestamp: BigNumber;
      encodedCall: string;
    }
  >;

  callStatic: {
    cancelGovernanceCall(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeGovernanceCall(
      _selector: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    governance(overrides?: CallOverrides): Promise<string>;

    governanceSettings(overrides?: CallOverrides): Promise<string>;

    initialise(
      _initialGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    productionMode(overrides?: CallOverrides): Promise<boolean>;

    switchToProductionMode(overrides?: CallOverrides): Promise<void>;

    timelockedCalls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & {
        allowedAfterTimestamp: BigNumber;
        encodedCall: string;
      }
    >;
  };

  filters: {
    "GovernanceCallTimelocked(bytes4,uint256,bytes)"(
      selector?: null,
      allowedAfterTimestamp?: null,
      encodedCall?: null
    ): GovernanceCallTimelockedEventFilter;
    GovernanceCallTimelocked(
      selector?: null,
      allowedAfterTimestamp?: null,
      encodedCall?: null
    ): GovernanceCallTimelockedEventFilter;

    "GovernanceInitialised(address)"(
      initialGovernance?: null
    ): GovernanceInitialisedEventFilter;
    GovernanceInitialised(
      initialGovernance?: null
    ): GovernanceInitialisedEventFilter;

    "GovernedProductionModeEntered(address)"(
      governanceSettings?: null
    ): GovernedProductionModeEnteredEventFilter;
    GovernedProductionModeEntered(
      governanceSettings?: null
    ): GovernedProductionModeEnteredEventFilter;

    "TimelockedGovernanceCallCanceled(bytes4,uint256)"(
      selector?: null,
      timestamp?: null
    ): TimelockedGovernanceCallCanceledEventFilter;
    TimelockedGovernanceCallCanceled(
      selector?: null,
      timestamp?: null
    ): TimelockedGovernanceCallCanceledEventFilter;

    "TimelockedGovernanceCallExecuted(bytes4,uint256)"(
      selector?: null,
      timestamp?: null
    ): TimelockedGovernanceCallExecutedEventFilter;
    TimelockedGovernanceCallExecuted(
      selector?: null,
      timestamp?: null
    ): TimelockedGovernanceCallExecutedEventFilter;
  };

  estimateGas: {
    cancelGovernanceCall(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeGovernanceCall(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    governanceSettings(overrides?: CallOverrides): Promise<BigNumber>;

    initialise(
      _initialGovernance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    productionMode(overrides?: CallOverrides): Promise<BigNumber>;

    switchToProductionMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    timelockedCalls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelGovernanceCall(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeGovernanceCall(
      _selector: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceSettings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialise(
      _initialGovernance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    productionMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchToProductionMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    timelockedCalls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
